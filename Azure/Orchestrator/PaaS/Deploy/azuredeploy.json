{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appName": {
      "type": "string",
      "minLength": 4,
      "maxLength": 20,
      "metadata": {
        "description": "Name of azure web app"
      }
    },
    "passphrase": {
      "type": "string",
      "minLength": 5,
      "maxLength": 30,
      "metadata": {
        "description": "Passphrase used to generate encryption keys"
      }
    },
    "orchestratorVersion": {
      "type": "string",
      "defaultValue": "19.4.4",
      "allowedValues": [
        "19.4.4",
        "19.4.3",
        "19.4.2",
        "18.4.6",
        "18.4.5",
        "18.4.4",
        "18.4.3",
        "18.4.2",
        "18.4.1"
      ],
      "metadata": {
        "description": "Version of the Orchestrator"
      }
    },
    "orchestratorSize": {
      "type": "string",
      "defaultValue": "small",
      "allowedValues": ["small", "medium", "large"],
      "metadata": {
        "description": "Size of the Orchestrator based on no. of total robots connected : Small size is for maximum 100 robots, Medium size for total no. of Robots between 100 and 500, Large size is for over 500 Robots"
      }
    },
    "orchestratorInstances": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 10,
      "metadata": {
        "description": "No. of Orchestrator instances on App service"
      }
    },
    "orchestratorAlertRules": {
      "type": "string",
      "defaultValue": "yes",
      "allowedValues": ["yes", "no"],
      "metadata": {
        "description": "Provision Orchestrator with AppInsight rules. You will need higher permissions on Azure subscription as these rules are added at RG level"
      }
    },
    "SQLServerName": {
      "type": "string",
      "minLength": 4,
      "maxLength": 35,
      "metadata": {
        "description": "SQL Azure DB Server name"
      }
    },
    "SQLServerDBName": {
      "type": "string",
      "minLength": 4,
      "maxLength": 35,
      "metadata": {
        "description": "SQL Azure DB name"
      }
    },
    "SQLServerAdminLogin": {
      "type": "string",
      "minLength": 4,
      "maxLength": 35,
      "metadata": {
        "description": "SQL Azure DB administrator  user login"
      }
    },
    "SQLServerAdminPassword": {
      "type": "securestring",
      "minLength": 12,
      "maxLength": 35,
      "metadata": {
        "description": "Database admin user password"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "appName": "[trim(toLower(parameters('appName')))]",
    "SQLServerName": "[trim(toLower(parameters('SQLServerName')))]",
    "orchestratorLink": "[concat('https://download.uipath.com/versions/',parameters('orchestratorVersion'),'/','UiPath.Web.zip')]",
    "appServiceTier": "PremiumV2",
    "skuCode": "P1v2",
    "appServiceWorkerSize": "3",
    "workerSizeId": "3",
    "numberOfWorkers": "1",
    "dbName": "[ toLower(parameters('SQLServerDBName'))]",
    "dbEdition": "[if(contains(parameters('orchestratorSize'), 'small'), 'Standard', if(contains(parameters('orchestratorSize'), 'medium'), 'Standard', 'Premium'))]",
    "dbPerformanceLevel": "[if(contains(parameters('orchestratorSize'), 'small'), 'S1', if(contains(parameters('orchestratorSize'), 'medium'), 'S3', 'P4'))]",
    "storageAccountType": "Standard_LRS",
    "salt": "[uniqueString(parameters('passphrase'))]",
    "encriptionKey": "[base64(substring(concat(variables('salt'),uniqueString(parameters('passphrase'),variables('salt')),variables('fifthKey')), 0, 32))]",
    "firstKey": "[guid(variables('salt'))]",
    "secondKey": "[guid(parameters('passphrase'),variables('salt'))]",
    "thirdKey": "[guid(variables('fifthKey'))]",
    "fourthKey": "[guid(parameters('passphrase'),variables('fifthKey'))]",
    "fifthKey": "[uniqueString(variables('salt'))]",
    "sixthKey": "[uniqueString(variables('firstKey'))]",
    "seventhKey": "[guid(variables('salt'),variables('fifthKey'))]",
    "eighthKey": "[guid(parameters('passphrase'))]",
    "machineKey": "[toUpper(substring(replace(concat(variables('eighthKey'),variables('thirdKey'),variables('salt')),'-',''), 0, 64))]",
    "validationMachineKey": "[toUpper(substring(replace(concat(variables('firstKey'),variables('secondKey'),variables('fourthKey'),variables('seventhKey'),variables('fifthKey'),variables('sixthKey')),'-',''), 0, 128))]",
    "apiKey": "[guid(parameters('passphrase'),variables('firstKey'))]",
    "activitiesApiKey": "[guid(parameters('passphrase'),variables('firstKey'))]",
    "azureLocationMap": {
      "eastasia": "southeastasia",
      "southeastasia": "southeastasia",
      "centralus": "westus2",
      "eastus": "eastus",
      "eastus2": "eastus",
      "westus": "westus2",
      "northcentralus": "westus2",
      "southcentralus": "southcentralus",
      "northeurope": "westeurope",
      "westeurope": "westeurope",
      "japanwest": "japaneast",
      "japaneast": "japaneast",
      "brazilsouth": "eastus",
      "australiaeast": "australiaeast",
      "australiasoutheast": "australiaeast",
      "southindia": "centralindia",
      "centralindia": "centralindia",
      "westindia": "centralindia",
      "canadacentral": "canadacentral",
      "canadaeast": "canadacentral",
      "ukwest": "uksouth",
      "westcentralus": "westus2",
      "koreasouth": "koreacentral",
      "eastus2euap": "eastus",
      "USDoD Central": "usgovvirginia",
      "USDoD East": "usgovvirginia",
      "usgovarizona": "usgovvirginia",
      "usgoviowa": "usgovvirginia",
      "usgovtexas": "usgovvirginia",
      "usgovvirginia": "usgovvirginia"
    },
    "appInsightsRegion": "[variables('azureLocationMap')[parameters('location')]]",
    "appInsight": "[trim(toLower(concat( parameters('appName'),'-appin' ) ))]",
    "location": "[if(startsWith(parameters('location'), 'us'), variables('appInsightsRegion'), parameters('location'))]",
    "servicePlanGovAPI": "2018-02-01",
    "storageAccountName": "[replace(concat(variables('appName'),'sc'),'-','')]",
    "storageid": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
    "appServicePlanName": "[concat(variables('appName'), '-serviceplan')]",
    "collation": "SQL_Latin1_General_CP1_CI_AS",
    "databaseMaxSizeBytes": "21474836480",
    "redisCacheName": "[concat(variables('appName'),'-redis')]",
    "redisid": "[resourceId('Microsoft.Cache/Redis/', variables('redisCacheName'))]",
    "redisCacheSKU": "[if(contains(parameters('orchestratorSize'), 'small'), 'Standard', if(contains(parameters('orchestratorSize'), 'medium'), 'Standard', 'Premium'))]",
    "redisCacheFamily": "[if(contains(parameters('orchestratorSize'), 'small'), 'C', if(contains(parameters('orchestratorSize'), 'medium'), 'C', 'P'))]",
    "redisCacheCapacity": "[if(contains(parameters('orchestratorSize'), 'small'), '2', if(contains(parameters('orchestratorSize'), 'medium'), '2', '3'))]",
    "enableNonSslPort": "true",
    "redisPort": "[if(contains(variables('enableNonSslPort'),'true'),'6380','6379')]",
    "diagnosticsEnabled": "true",
    "endpointSuffix": "[if(startsWith(parameters('location'), 'us'), 'EndpointSuffix=core.usgovcloudapi.net', 'EndpointSuffix=core.windows.net')]"
  },
  "resources": [
    {
      "apiVersion": "2017-05-10",
      "name": "pid-5b5efb37-e388-4862-add1-0be0d6d0d45b",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "name": "[variables('SQLServerName')]",
      "type": "Microsoft.Sql/servers",
      "location": "[variables('location')]",
      "apiVersion": "2017-03-01-preview",
      "properties": {
        "administratorLogin": "[parameters('SQLServerAdminLogin')]",
        "administratorLoginPassword": "[parameters('SQLServerAdminPassword')]",
        "version": "12.0"
      },
      "resources": [
        {
          "apiVersion": "2017-03-01-preview",
          "name": "[variables('dbName')]",
          "type": "databases",
          "location": "[variables('location')]",
          "dependsOn": ["[variables('SQLServerName')]"],
          "sku": {
            "name": "[variables('dbPerformanceLevel')]",
            "tier": "[variables('dbEdition')]"
          },
          "kind": "v12.0,user",
          "properties": {
            "maxSizeBytes": "[variables('databaseMaxSizeBytes')]",
            "collation": "[variables('collation')]",
            "catalogCollation": "[variables('collation')]",
            "zoneRedundant": false,
            "minCapacity": "50"
          }
        },
        {
          "apiVersion": "2017-03-01-preview",
          "name": "AllowAllWindowsAzureIps",
          "type": "firewallrules",
          "location": "[variables('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers/', variables('SQLServerName'))]"
          ],
          "properties": {
            "endIpAddress": "0.0.0.0",
            "startIpAddress": "0.0.0.0"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2018-11-01",
      "location": "[variables('location')]",
      "sku": {
        "name": "[variables('storageAccountType')]"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "apiVersion": "[if(startsWith(parameters('location'), 'us'), variables('servicePlanGovAPI'), '2018-11-01')]",
      "name": "[variables('appServicePlanName')]",
      "type": "Microsoft.Web/serverFarms",
      "location": "[variables('location')]",
      "kind": "",
      "properties": {
        "name": "[variables('appServicePlanName')]",
        "workerSize": "[variables('appServiceWorkerSize')]",
        "workerSizeId": "[variables('workerSizeId')]",
        "numberOfWorkers": "[variables('numberOfWorkers')]",
        "reserved": false,
        "hostingEnvironment": ""
      },
      "sku": {
        "Tier": "[variables('appServiceTier')]",
        "Name": "[variables('skuCode')]"
      }
    },
    {
      "apiVersion": "2018-11-01",
      "name": "[variables('appName')]",
      "type": "Microsoft.Web/Sites",
      "location": "[variables('location')]",
      "tags": {
        "[concat('hidden-related:', '/subscriptions/', subscription().subscriptionId,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]": "empty"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverFarms/', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Cache/Redis/', variables('redisCacheName'))]",
        "[resourceId('Microsoft.Insights/components/', variables('appInsight'))]"
      ],
      "properties": {
        "name": "[variables('appName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms/', variables('appServicePlanName'))]",
        "hostingEnvironment": "",
        "siteConfig": {
          "connectionStrings": [
            {
              "name": "Default",
              "ConnectionString": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('SQLServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', variables('dbName'), ';User Id=', parameters('SQLServerAdminLogin'), '@', variables('SQLServerName'), ';Password=', parameters('SQLServerAdminPassword'), ';')]",
              "type": "SQLAzure"
            }
          ],
          "appSettings": [
            {
              "name": "LoadBalancer.UseRedis",
              "value": "[if(not(equals(parameters('orchestratorInstances'),1)),'true','false')]"
            },
            {
              "name": "LoadBalancer.Redis.ConnectionString",
              "value": "[if(not(equals(parameters('orchestratorInstances'),1)),concat(reference(variables('redisid'), '2018-03-01').hostName,':',variables('redisPort'),',password=',listKeys(variables('redisid'), '2018-03-01').primaryKey,',ssl=',variables('enableNonSslPort'),',abortConnect=False'),json('null'))]"
            },
            {
              "name": "LoadBalancer.SignalR.UseRedisScaleout",
              "value": "[if(not(equals(parameters('orchestratorInstances'),1)),'true','false')]"
            },
            {
              "name": "LoadBalancer.SignalR.RedisScaleout.ConnectionString",
              "value": "[if(not(equals(parameters('orchestratorInstances'),1)),concat(reference(variables('redisid'), '2018-03-01').hostName,':',variables('redisPort'),',password=',listKeys(variables('redisid'), '2018-03-01').secondaryKey,',ssl=',variables('enableNonSslPort'),',abortConnect=False'),json('null'))]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsight'))).InstrumentationKey]"
            },
            {
              "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "DiagnosticServices_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "APPINSIGHTS_PROFILERFEATURE_VERSION",
              "value": "1.0.0"
            },
            {
              "name": "APPINSIGHTS_SNAPSHOTFEATURE_VERSION",
              "value": "1.0.0"
            },
            {
              "name": "InstrumentationEngine_EXTENSION_VERSION",
              "value": "~1"
            },
            {
              "name": "SnapshotDebugger_EXTENSION_VERSION",
              "value": "~1"
            },
            {
              "name": "XDT_MicrosoftApplicationInsights_BaseExtensions",
              "value": "~1"
            },
            {
              "name": "XDT_MicrosoftApplicationInsights_Mode",
              "value": "recommended"
            },
            {
              "name": "NuGet.Packages.ApiKey",
              "value": "[variables('apiKey')]"
            },
            {
              "name": "NuGet.Activities.ApiKey",
              "value": "[variables('activitiesApiKey')]"
            },
            {
              "name": "NuGet.Packages.Path",
              "value": "~/NuGetPackages"
            },
            {
              "name": "NuGet.Activities.Path",
              "value": "~/NuGetPackages/Activities"
            },
            {
              "name": "NuGet.Repository.Type",
              "value": "[if(contains(parameters('orchestratorVersion'),'19'),'Composite',json('null'))]"
            },
            {
              "name": "Storage.Type",
              "value": "[if(contains(parameters('orchestratorVersion'),'19'),'Azure',json('null'))]"
            },
            {
              "name": "Storage.Location",
              "value": "[if(contains(parameters('orchestratorVersion'),'19'),concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listKeys(variables('storageid'), '2019-04-01').keys[0].value,';',variables('endpointSuffix')),json('null'))]"
            },
            {
              "name": "Auth.Cookie.Expire",
              "value": "30"
            },
            {
              "name": "AcceptedRootUrls",
              "value": "http://localhost:6234"
            },
            {
              "name": "Auth.Password.DefaultExpirationDays",
              "value": "0"
            },
            {
              "name": "Tenant.Registration.Enabled",
              "value": "false"
            },
            {
              "name": "OrganizationUnit.Enabled",
              "value": "false"
            },
            {
              "name": "CustomTitle",
              "value": ""
            },
            {
              "name": "ExternalAuth.AzureAD.Enabled",
              "value": "false"
            },
            {
              "name": "ExternalAuth.AzureAD.ApplicationId",
              "value": ""
            },
            {
              "name": "ExternalAuth.AzureAD.RedirectUri",
              "value": ""
            },
            {
              "name": "ExternalAuth.Saml2.Enabled",
              "value": "false"
            }
          ]
        },
        "name": "[variables('appName')]",
        "enabled": true
      },
      "resources": [
        {
          "apiVersion": "2018-11-01",
          "name": "MSDeploy",
          "type": "Extensions",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites/', variables('appName'))]",
            "[concat('Microsoft.Web/Sites/', variables('appName'), '/config/web')]",
            "[concat('Microsoft.Sql/servers/', variables('SQLServerName'), '/databases/', variables('dbName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
          ],
          "properties": {
            "packageUri": "[variables('orchestratorLink')]",
            "dbType": "SQL",
            "connectionString": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('SQLServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', variables('dbName'), ';User Id=', parameters('SQLServerAdminLogin'), '@', variables('SQLServerName'), ';Password=', parameters('SQLServerAdminPassword'), ';')]",
            "setParameters": {
              "IIS Web Application Name": "variables('appName')",
              "databaseEnableAutomaticMigrations": "true",
              "machineKeyDecryption": "AES",
              "machineKeyDecryptionKey": "[variables('machineKey')]",
              "machineKeyValidation": "HMACSHA256",
              "machineKeyValidationKey": "[variables('validationMachineKey')]",
              "EncryptionKey": "[variables('encriptionKey')]",
              "apiKey": "[variables('apiKey')]",
              "activitiesApiKey": "[variables('activitiesApiKey')]"
            }
          }
        },
        {
          "apiVersion": "2018-11-01",
          "name": "connectionstrings",
          "type": "config",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', variables('appName'))]",
            "[concat('Microsoft.Sql/servers/', variables('SQLServerName'), '/databases/', variables('dbName'))]",
            "[concat('Microsoft.Web/Sites/', variables('appName'), '/Extensions/MSDeploy')]"
          ],
          "properties": {
            "Default": {
              "value": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('SQLServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', variables('dbName'), ';User Id=', parameters('SQLServerAdminLogin'), '@', variables('SQLServerName'), ';Password=', parameters('SQLServerAdminPassword'), ';')]",
              "type": "SQLAzure"
            }
          }
        },
        {
          "apiVersion": "2018-11-01",
          "name": "web",
          "type": "config",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites/', variables('appName'))]"
          ],
          "properties": {
            "phpVersion": "off",
            "netFrameworkVersion": "v4.5",
            "use32BitWorkerProcess": "true",
            "webSocketsEnabled": true,
            "alwaysOn": "true",
            "httpLoggingEnabled": true,
            "logsDirectorySizeLimit": 40
          }
        }
      ]
    },
    {
      "condition": "[greaterOrEquals(parameters('orchestratorInstances'),2)]",
      "apiVersion": "2015-04-01",
      "name": "[concat(variables('appServicePlanName'), '-scaleset')]",
      "type": "microsoft.insights/autoscalesettings",
      "location": "[variables('appInsightsRegion')]",
      "tags": {
        "[concat('hidden-link:', '/subscriptions/', subscription().subscriptionId,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]": "Resource"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('appServicePlanName'))]"
      ],
      "properties": {
        "profiles": [
          {
            "name": "Default",
            "capacity": {
              "minimum": "[parameters('orchestratorInstances')]",
              "maximum": "15",
              "default": "[parameters('orchestratorInstances')]"
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms/', variables('appServicePlanName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 80
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT10M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms/', variables('appServicePlanName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT1H",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": 60
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT1H"
                }
              }
            ]
          }
        ],
        "enabled": true,
        "name": "[concat(variables('appServicePlanName'), '-scaleset')]",
        "targetResourceUri": "[resourceId('Microsoft.Web/serverfarms/', variables('appServicePlanName'))]"
      }
    },
    {
      "condition": "[equals(parameters('orchestratorAlertRules'), 'yes')]",
      "apiVersion": "2016-03-01",
      "name": "[concat('ServerErrors ', variables('appName'))]",
      "type": "microsoft.insights/alertrules",
      "location": "[variables('appInsightsRegion')]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('appName'))]": "Resource"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/', variables('appName'))]"
      ],
      "properties": {
        "name": "[concat('ServerErrors ', variables('appName'))]",
        "description": "[concat(variables('appName'), ' has some server errors, status code 5xx.')]",
        "isEnabled": "[variables('diagnosticsEnabled')]",
        "condition": {
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleMetricDataSource",
            "resourceUri": "[resourceId('Microsoft.Web/sites/', variables('appName'))]",
            "metricName": "Http5xx"
          },
          "operator": "GreaterThan",
          "threshold": 0,
          "windowSize": "PT5M"
        },
        "action": {
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "condition": "[equals(parameters('orchestratorAlertRules'), 'yes')]",
      "apiVersion": "2016-03-01",
      "name": "[concat('ForbiddenRequests ', variables('appName'))]",
      "type": "microsoft.insights/alertrules",
      "location": "[variables('appInsightsRegion')]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('appName'))]": "Resource"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/', variables('appName'))]"
      ],
      "properties": {
        "name": "[concat('ForbiddenRequests ', variables('appName'))]",
        "description": "[concat(variables('appName'), ' has some requests that are forbidden, status code 403.')]",
        "isEnabled": "[variables('diagnosticsEnabled')]",
        "condition": {
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleMetricDataSource",
            "resourceUri": "[resourceId('Microsoft.Web/sites/', variables('appName'))]",
            "metricName": "Http403"
          },
          "operator": "GreaterThan",
          "threshold": 0,
          "windowSize": "PT5M"
        },
        "action": {
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "condition": "[equals(parameters('orchestratorAlertRules'), 'yes')]",
      "apiVersion": "2016-03-01",
      "name": "[concat('CPUHigh ', variables('appServicePlanName'))]",
      "type": "microsoft.insights/alertrules",
      "location": "[variables('appInsightsRegion')]",
      "tags": {
        "[concat('hidden-link:', '/subscriptions/', subscription().subscriptionId,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]": "Resource"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('appServicePlanName'))]"
      ],
      "properties": {
        "name": "[concat('CPUHigh ', variables('appServicePlanName'))]",
        "description": "[concat('The average CPU is high across all the instances of ', variables('appServicePlanName'))]",
        "isEnabled": "[variables('diagnosticsEnabled')]",
        "condition": {
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleMetricDataSource",
            "resourceUri": "[resourceId('Microsoft.Web/serverfarms/', variables('appServicePlanName'))]",
            "metricName": "CpuPercentage"
          },
          "operator": "GreaterThan",
          "threshold": 90,
          "windowSize": "PT15M"
        },
        "action": {
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "condition": "[equals(parameters('orchestratorAlertRules'), 'yes')]",
      "apiVersion": "2016-03-01",
      "name": "[concat('LongHttpQueue ', variables('appServicePlanName'))]",
      "type": "microsoft.insights/alertrules",
      "location": "[variables('appInsightsRegion')]",
      "tags": {
        "[concat('hidden-link:', '/subscriptions/', subscription().subscriptionId,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]": "Resource"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('appServicePlanName'))]"
      ],
      "properties": {
        "name": "[concat('LongHttpQueue ', variables('appServicePlanName'))]",
        "description": "[concat('The HTTP queue for the instances of ', variables('appServicePlanName'), ' has a large number of pending requests.')]",
        "isEnabled": "[variables('diagnosticsEnabled')]",
        "condition": {
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleMetricDataSource",
            "resourceUri": "[resourceId('Microsoft.Web/serverfarms/', variables('appServicePlanName'))]",
            "metricName": "HttpQueueLength"
          },
          "operator": "GreaterThan",
          "threshold": 100,
          "windowSize": "PT5M"
        },
        "action": {
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "apiVersion": "2018-05-01-preview",
      "name": "[variables('appInsight')]",
      "type": "microsoft.insights/components",
      "location": "[variables('appInsightsRegion')]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('appName'))]": "Resource"
      },
      "properties": {
        "applicationId": "[variables('appName')]"
      }
    },
    {
      "condition": "[greaterOrEquals(parameters('orchestratorInstances'),2)]",
      "apiVersion": "2018-03-01",
      "name": "[variables('redisCacheName')]",
      "type": "Microsoft.Cache/Redis",
      "location": "[variables('location')]",
      "properties": {
        "enableNonSslPort": "[variables('enableNonSslPort')]",
        "sku": {
          "capacity": "[variables('redisCacheCapacity')]",
          "family": "[variables('redisCacheFamily')]",
          "name": "[variables('redisCacheSKU')]"
        }
      },
      "resources": [
        {
          "condition": "[greaterOrEquals(parameters('orchestratorInstances'),2)]",
          "apiVersion": "2017-05-01-preview",
          "type": "Microsoft.Cache/redis/providers/diagnosticsettings",
          "name": "[concat(variables('redisCacheName'),'/Microsoft.Insights/','redisinsight')]",
          "location": "[variables('location')]",
          "dependsOn": [
            "[concat('Microsoft.Cache/Redis/', variables('redisCacheName'))]"
          ],
          "properties": {
            "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName'))]",
            "logs": [],
            "metrics": [
              {
                "timeGrain": "AllMetrics",
                "enabled": "[variables('diagnosticsEnabled')]",
                "retentionPolicy": {
                  "days": 90,
                  "enabled": "[variables('diagnosticsEnabled')]"
                }
              }
            ]
          }
        }
      ]
    }
  ]
}
